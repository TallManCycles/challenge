# Docker Compose configuration for external PostgreSQL database
# Use this when connecting to a separately hosted PostgreSQL instance

services:
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME:-garmin-challenge-backend}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ConnectionStrings__DefaultConnection=${CONNECTION_STRING}
      - Auth__JwtKey=${JWT_KEY}
      - Auth__Salt=${AUTH_SALT}
      - Frontend__AllowedOrigins__0=${FRONTEND_ORIGIN_0}
      - Frontend__AllowedOrigins__1=${FRONTEND_ORIGIN_1}
      - Frontend__AllowedOrigins__2=${FRONTEND_ORIGIN_2}
      - Logging__LogLevel__Default=${LOG_LEVEL_DEFAULT:-Warning}
      - Logging__LogLevel__Microsoft_AspNetCore=${LOG_LEVEL_ASPNETCORE:-Warning}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        VITE_APP_API_ENDPOINT: ${VITE_APP_API_ENDPOINT}
    container_name: ${FRONTEND_CONTAINER_NAME:-garmin-challenge-frontend}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    environment:
      - VITE_APP_API_ENDPOINT=${VITE_APP_API_ENDPOINT}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
