services:
  postgres:
    image: postgres:16
    container_name: ${POSTGRES_CONTAINER_NAME:-garmin-challenge-postgres}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-garmin_challenge}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME:-garmin-challenge-backend}
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=${POSTGRES_PORT:-5432};Database=${POSTGRES_DB:-garmin_challenge};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD}
      - Auth__JwtKey=${JWT_KEY}
      - Auth__Salt=${AUTH_SALT}
      - Frontend__AllowedOrigins__0=${FRONTEND_ORIGIN_0:-https://your-domain.com}
      - Frontend__AllowedOrigins__1=${FRONTEND_ORIGIN_1:-https://www.your-domain.com}
      - Frontend__AllowedOrigins__2=${FRONTEND_ORIGIN_2:-http://localhost:3000}
      - Logging__LogLevel__Default=Warning
      - Logging__LogLevel__Microsoft_AspNetCore=Warning
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        VITE_APP_API_ENDPOINT: ${VITE_APP_API_ENDPOINT:-http://localhost:8080}
    container_name: ${FRONTEND_CONTAINER_NAME:-garmin-challenge-frontend}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    environment:
      - VITE_APP_API_ENDPOINT=${VITE_APP_API_ENDPOINT:-http://localhost:8080}
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

volumes:
  postgres_data: