services:
  postgres:
    image: postgres:16
    # --- CHANGE: Added a default container name for consistency. ---
    container_name: ${POSTGRES_CONTAINER_NAME:-garmin-challenge-postgres}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-garmin_challenge}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      # The host port (left) maps to the container's internal port (right, 5432).
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      # --- CHANGE: Used the default-aware variable in the health check. ---
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME:-garmin-challenge-backend}
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      # --- FIX: The Port is now hardcoded to 5432 for internal container communication. ---
      # --- CHANGE: Enforced all required connection string variables. ---
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST};Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - Auth__JwtKey=${JWT_KEY}
      - Auth__Salt=${AUTH_SALT}
      - Frontend__AllowedOrigins__0=${FRONTEND_ORIGIN_0}
      - Frontend__AllowedOrigins__1=${FRONTEND_ORIGIN_1} # Optional
      - Logging__LogLevel__Default=Warning
      - Logging__LogLevel__Microsoft_AspNetCore=Warning
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_APP_API_ENDPOINT: ${VITE_APP_API_ENDPOINT:-http://localhost:8080}
    container_name: ${FRONTEND_CONTAINER_NAME:-garmin-challenge-frontend}
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

volumes:
  postgres_data: