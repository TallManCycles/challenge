name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run TypeScript type check
        run: cd frontend && npm run type-check

      - name: Run linting
        run: cd frontend && npm run lint

      - name: Run unit tests
        run: cd frontend && npm run test:unit

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Restore backend dependencies
        run: cd backend && dotnet restore

      - name: Build backend
        run: cd backend && dotnet build --no-restore

      - name: Restore test dependencies
        run: cd backend.Tests && dotnet restore

      - name: Build tests
        run: cd backend.Tests && dotnet build --no-restore

      - name: Run backend tests
        run: cd backend.Tests && dotnet test --no-build --verbosity normal

  integration-check:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build frontend for production
        run: cd frontend && npm run build

      - name: Install Entity Framework tools
        run: dotnet tool install --global dotnet-ef

      - name: Restore and build backend
        run: |
          cd backend
          dotnet restore
          dotnet build --no-restore --configuration Release

      - name: Check migration files exist
        run: |
          if [ -d "backend/Migrations" ]; then
            echo "‚úÖ Migration files found"
            ls -la backend/Migrations/
          else
            echo "‚ùå No migration files found"
            exit 1
          fi

      - name: Validate database context
        run: |
          cd backend
          dotnet ef dbcontext info --no-build --configuration Release || echo "‚ö†Ô∏è EF Context check skipped (no database required for build)"

      - name: Production build verification
        run: echo "‚úÖ Frontend and backend builds completed successfully for production!"

      - name: All checks passed
        run: echo "üéâ All tests and integration checks passed successfully!"